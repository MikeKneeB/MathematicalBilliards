#!/usr/bin/python

# Python script to build files in worksheet1 to source.
#
# make is an awful language and I refuse to use it. cmake is no better.
# 


import argparse
from subprocess import call
import os
import glob
import sys

parser = argparse.ArgumentParser(description='Build automater written by Mike Knee')

parser.add_argument('--flags', '-f', nargs='*', help='Specify non-default compiler flags. The "-" should be omitted.')
parser.add_argument('--suppress-flags', help='Suppress default compiler switches', action='store_true')
parser.add_argument('--sources', '-s', nargs='*', help='List of specific sources to compile.')
parser.add_argument('--windows', '-w', help='Compile for windows lol.', action='store_true')
parser.add_argument('--clean', '-c', help='Clean build directory of output files.', action='store_true')
parser.add_argument('--clean-output', '-o', help='Clean directory of large text output files.', action='store_true')

compiler="g++"
compiler_flags=["-Wall", "-O2", "-std=c++11"]
source_dir="source/"
exe_dir="images/"
obj_dir="obj/"
success = True

executables_to_compile={"test.cpp" : "test",
			"rectest.cpp" : "rectest",
			"main.cpp" : "main"}


args = parser.parse_args()

if args.clean_output:
    print
    print "Cleaning data output files."
    print
    for file_ in os.listdir('.'):
        if file_.endswith(".dat") or file_.endswith(".pdf"):
            os.remove(file_)
    print "Done"
    print
    sys.exit(0)  

elif args.clean:
    print
    print "Cleaning build output files."
    print
    for file_ in os.listdir(obj_dir):
        os.remove(obj_dir + file_)
    print "Done" 
    print
    sys.exit(0)

if args.sources==None:
    print
    print "Beginning build."
    print
    for file_ in os.listdir(source_dir): 
        if file_.endswith(".cpp"):
            # and file_ not in executables_to_compile.keys()
            exe_list = [compiler, "-c", "-o", obj_dir+file_[:-4]+".o", source_dir+file_]
            if args.suppress_flags==False:
                exe_list += compiler_flags 
            if not args.flags==None:
                for item in args.flags:
                    exe_list += "-"+item
            if not os.path.exists(obj_dir+file_[:-4]+".o") or os.path.getmtime(obj_dir+file_[:-4]+".o") < os.path.getmtime(source_dir+file_):
                print "Calling: " + ' '.join(exe_list)
                if call(exe_list) != 0:
                    success = False
            else:
                print file_ + " is up to date."
    print
    for source_file in executables_to_compile:
        if args.windows:
            exe_list = [compiler, "-o", exe_dir+executables_to_compile[source_file]+'.exe', obj_dir+source_file[:-4]+".o"]
        else:
            exe_list = [compiler, "-o", exe_dir+executables_to_compile[source_file], obj_dir+source_file[:-4]+".o"]

        for file_ in os.listdir(obj_dir):
            if file_[:-2]+".cpp" not in executables_to_compile.keys():
                exe_list += [obj_dir+file_]

        if args.suppress_flags==False:
            exe_list += compiler_flags 

        if not args.flags==None:
            for item in args.flags:
                exe_list += "-"+item

        print "Calling: " + ' '.join(exe_list)
        if call(exe_list) != 0:
            success = False
    print

else:

    for item in args.sources:
        if args.windows:
            exe_list = [compiler, "-o", exe_dir+executables_to_compile[source_file]+'.exe', source_dir+source_file]
        else:
            exe_list = [compiler, "-o", exe_dir+executables_to_compile[source_file], source_dir+source_file]
        if args.suppress_flags==False:
            exe_list[1:1] = compiler_flags 
        if not args.flags==None:
            for item in args.flags:
                exe_list.insert(1, "-"+item)
        print exe_list
        if call(exe_list) != 0:
            success = False
        
if success:
    print "Done!"
    print
    sys.exit(0) 
else:
    print "Something went wrong."
    print
    sys.exit(1)
